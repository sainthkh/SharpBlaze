// This code is generated by GenerateAst.cs. Do not modify it directly.
namespace Lox;

public abstract class Expr {
    public interface IVisitor<T> {
        T VisitBinaryExpr(Binary expr);
        T VisitGroupingExpr(Grouping expr);
        T VisitLiteralExpr(Literal expr);
        T VisitUnaryExpr(Unary expr);
    }
    public class Binary : Expr {
        public Expr Left { get; private set; }
        public Token Op { get; private set; }
        public Expr Right { get; private set; }

        public Binary(Expr left, Token op, Expr right) {
            Left = left;
            Op = op;
            Right = right;
        }

        public override T Accept<T>(IVisitor<T> visitor) {
            return visitor.VisitBinaryExpr(this);
        }
    }
    public class Grouping : Expr {
        public Expr Expression { get; private set; }

        public Grouping(Expr expression) {
            Expression = expression;
        }

        public override T Accept<T>(IVisitor<T> visitor) {
            return visitor.VisitGroupingExpr(this);
        }
    }
    public class Literal : Expr {
        public object? Value { get; private set; }

        public Literal(object? value) {
            Value = value;
        }

        public override T Accept<T>(IVisitor<T> visitor) {
            return visitor.VisitLiteralExpr(this);
        }
    }
    public class Unary : Expr {
        public Token Op { get; private set; }
        public Expr Right { get; private set; }

        public Unary(Token op, Expr right) {
            Op = op;
            Right = right;
        }

        public override T Accept<T>(IVisitor<T> visitor) {
            return visitor.VisitUnaryExpr(this);
        }
    }

    public abstract T Accept<T>(IVisitor<T> visitor);
}
