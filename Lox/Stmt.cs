// This code is generated by GenerateAst.cs. Do not modify it directly.
namespace Lox;

public abstract class Stmt {
    public interface IVisitor<T> {
        T VisitBlockStmt(Block stmt);
        T VisitExpressionStmt(Expression stmt);
        T VisitIfStmt(If stmt);
        T VisitPrintStmt(Print stmt);
        T VisitVarStmt(Var stmt);
        T VisitWhileStmt(While stmt);
    }
    public class Block : Stmt {
        public List<Stmt?> Statements { get; private set; }

        public Block(List<Stmt?> statements) {
            Statements = statements;
        }

        public override T Accept<T>(IVisitor<T> visitor) {
            return visitor.VisitBlockStmt(this);
        }
    }
    public class Expression : Stmt {
        public Expr Expr { get; private set; }

        public Expression(Expr expr) {
            Expr = expr;
        }

        public override T Accept<T>(IVisitor<T> visitor) {
            return visitor.VisitExpressionStmt(this);
        }
    }
    public class If : Stmt {
        public Expr Condition { get; private set; }
        public Stmt ThenBranch { get; private set; }
        public Stmt? ElseBranch { get; private set; }

        public If(Expr condition, Stmt thenBranch, Stmt? elseBranch) {
            Condition = condition;
            ThenBranch = thenBranch;
            ElseBranch = elseBranch;
        }

        public override T Accept<T>(IVisitor<T> visitor) {
            return visitor.VisitIfStmt(this);
        }
    }
    public class Print : Stmt {
        public Expr Expr { get; private set; }

        public Print(Expr expr) {
            Expr = expr;
        }

        public override T Accept<T>(IVisitor<T> visitor) {
            return visitor.VisitPrintStmt(this);
        }
    }
    public class Var : Stmt {
        public Token Name { get; private set; }
        public Expr? Initializer { get; private set; }

        public Var(Token name, Expr? initializer) {
            Name = name;
            Initializer = initializer;
        }

        public override T Accept<T>(IVisitor<T> visitor) {
            return visitor.VisitVarStmt(this);
        }
    }
    public class While : Stmt {
        public Expr Condition { get; private set; }
        public Stmt Body { get; private set; }

        public While(Expr condition, Stmt body) {
            Condition = condition;
            Body = body;
        }

        public override T Accept<T>(IVisitor<T> visitor) {
            return visitor.VisitWhileStmt(this);
        }
    }

    public abstract T Accept<T>(IVisitor<T> visitor);
}
